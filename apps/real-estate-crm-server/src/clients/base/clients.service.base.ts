/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Clients as PrismaClients,
  Appointments as PrismaAppointments,
} from "@prisma/client";

export class ClientsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClientsCountArgs, "select">): Promise<number> {
    return this.prisma.clients.count(args);
  }

  async clientsItems<T extends Prisma.ClientsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientsFindManyArgs>
  ): Promise<PrismaClients[]> {
    return this.prisma.clients.findMany<Prisma.ClientsFindManyArgs>(args);
  }
  async clients<T extends Prisma.ClientsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientsFindUniqueArgs>
  ): Promise<PrismaClients | null> {
    return this.prisma.clients.findUnique(args);
  }
  async createClients<T extends Prisma.ClientsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientsCreateArgs>
  ): Promise<PrismaClients> {
    return this.prisma.clients.create<T>(args);
  }
  async updateClients<T extends Prisma.ClientsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientsUpdateArgs>
  ): Promise<PrismaClients> {
    return this.prisma.clients.update<T>(args);
  }
  async deleteClients<T extends Prisma.ClientsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientsDeleteArgs>
  ): Promise<PrismaClients> {
    return this.prisma.clients.delete(args);
  }

  async findAppointmentsItems(
    parentId: string,
    args: Prisma.AppointmentsFindManyArgs
  ): Promise<PrismaAppointments[]> {
    return this.prisma.clients
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentsItems(args);
  }
}
