/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Properties as PrismaProperties } from "@prisma/client";

export class PropertiesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PropertiesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.properties.count(args);
  }

  async propertiesItems<T extends Prisma.PropertiesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindManyArgs>
  ): Promise<PrismaProperties[]> {
    return this.prisma.properties.findMany<Prisma.PropertiesFindManyArgs>(args);
  }
  async properties<T extends Prisma.PropertiesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesFindUniqueArgs>
  ): Promise<PrismaProperties | null> {
    return this.prisma.properties.findUnique(args);
  }
  async createProperties<T extends Prisma.PropertiesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesCreateArgs>
  ): Promise<PrismaProperties> {
    return this.prisma.properties.create<T>(args);
  }
  async updateProperties<T extends Prisma.PropertiesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesUpdateArgs>
  ): Promise<PrismaProperties> {
    return this.prisma.properties.update<T>(args);
  }
  async deleteProperties<T extends Prisma.PropertiesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertiesDeleteArgs>
  ): Promise<PrismaProperties> {
    return this.prisma.properties.delete(args);
  }
}
