/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AppointmentsService } from "../appointments.service";
import { AppointmentsCreateInput } from "./AppointmentsCreateInput";
import { Appointments } from "./Appointments";
import { AppointmentsFindManyArgs } from "./AppointmentsFindManyArgs";
import { AppointmentsWhereUniqueInput } from "./AppointmentsWhereUniqueInput";
import { AppointmentsUpdateInput } from "./AppointmentsUpdateInput";
import { AgentsFindManyArgs } from "../../agents/base/AgentsFindManyArgs";
import { Agents } from "../../agents/base/Agents";
import { AgentsWhereUniqueInput } from "../../agents/base/AgentsWhereUniqueInput";

export class AppointmentsControllerBase {
  constructor(protected readonly service: AppointmentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Appointments })
  async createAppointments(
    @common.Body() data: AppointmentsCreateInput
  ): Promise<Appointments> {
    return await this.service.createAppointments({
      data: {
        ...data,

        agent: data.agent
          ? {
              connect: data.agent,
            }
          : undefined,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,
      },
      select: {
        agent: {
          select: {
            id: true,
          },
        },

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateTime: true,
        id: true,
        location: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Appointments] })
  @ApiNestedQuery(AppointmentsFindManyArgs)
  async appointmentsItems(
    @common.Req() request: Request
  ): Promise<Appointments[]> {
    const args = plainToClass(AppointmentsFindManyArgs, request.query);
    return this.service.appointmentsItems({
      ...args,
      select: {
        agent: {
          select: {
            id: true,
          },
        },

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateTime: true,
        id: true,
        location: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Appointments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async appointments(
    @common.Param() params: AppointmentsWhereUniqueInput
  ): Promise<Appointments | null> {
    const result = await this.service.appointments({
      where: params,
      select: {
        agent: {
          select: {
            id: true,
          },
        },

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateTime: true,
        id: true,
        location: true,
        notes: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Appointments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAppointments(
    @common.Param() params: AppointmentsWhereUniqueInput,
    @common.Body() data: AppointmentsUpdateInput
  ): Promise<Appointments | null> {
    try {
      return await this.service.updateAppointments({
        where: params,
        data: {
          ...data,

          agent: data.agent
            ? {
                connect: data.agent,
              }
            : undefined,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,
        },
        select: {
          agent: {
            select: {
              id: true,
            },
          },

          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dateTime: true,
          id: true,
          location: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Appointments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAppointments(
    @common.Param() params: AppointmentsWhereUniqueInput
  ): Promise<Appointments | null> {
    try {
      return await this.service.deleteAppointments({
        where: params,
        select: {
          agent: {
            select: {
              id: true,
            },
          },

          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dateTime: true,
          id: true,
          location: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/agentsItems")
  @ApiNestedQuery(AgentsFindManyArgs)
  async findAgentsItems(
    @common.Req() request: Request,
    @common.Param() params: AppointmentsWhereUniqueInput
  ): Promise<Agents[]> {
    const query = plainToClass(AgentsFindManyArgs, request.query);
    const results = await this.service.findAgentsItems(params.id, {
      ...query,
      select: {
        appointments: {
          select: {
            id: true,
          },
        },

        assignedProperties: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/agentsItems")
  async connectAgentsItems(
    @common.Param() params: AppointmentsWhereUniqueInput,
    @common.Body() body: AgentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agentsItems: {
        connect: body,
      },
    };
    await this.service.updateAppointments({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/agentsItems")
  async updateAgentsItems(
    @common.Param() params: AppointmentsWhereUniqueInput,
    @common.Body() body: AgentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agentsItems: {
        set: body,
      },
    };
    await this.service.updateAppointments({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/agentsItems")
  async disconnectAgentsItems(
    @common.Param() params: AppointmentsWhereUniqueInput,
    @common.Body() body: AgentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateAppointments({
      where: params,
      data,
      select: { id: true },
    });
  }
}
