/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Appointments as PrismaAppointments,
  Agents as PrismaAgents,
  Clients as PrismaClients,
} from "@prisma/client";

export class AppointmentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AppointmentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.appointments.count(args);
  }

  async appointmentsItems<T extends Prisma.AppointmentsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentsFindManyArgs>
  ): Promise<PrismaAppointments[]> {
    return this.prisma.appointments.findMany<Prisma.AppointmentsFindManyArgs>(
      args
    );
  }
  async appointments<T extends Prisma.AppointmentsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentsFindUniqueArgs>
  ): Promise<PrismaAppointments | null> {
    return this.prisma.appointments.findUnique(args);
  }
  async createAppointments<T extends Prisma.AppointmentsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentsCreateArgs>
  ): Promise<PrismaAppointments> {
    return this.prisma.appointments.create<T>(args);
  }
  async updateAppointments<T extends Prisma.AppointmentsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentsUpdateArgs>
  ): Promise<PrismaAppointments> {
    return this.prisma.appointments.update<T>(args);
  }
  async deleteAppointments<T extends Prisma.AppointmentsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppointmentsDeleteArgs>
  ): Promise<PrismaAppointments> {
    return this.prisma.appointments.delete(args);
  }

  async findAgentsItems(
    parentId: string,
    args: Prisma.AgentsFindManyArgs
  ): Promise<PrismaAgents[]> {
    return this.prisma.appointments
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .agentsItems(args);
  }

  async getAgent(parentId: string): Promise<PrismaAgents | null> {
    return this.prisma.appointments
      .findUnique({
        where: { id: parentId },
      })
      .agent();
  }

  async getClient(parentId: string): Promise<PrismaClients | null> {
    return this.prisma.appointments
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}
