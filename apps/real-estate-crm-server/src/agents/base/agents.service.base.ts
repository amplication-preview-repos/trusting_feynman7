/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Agents as PrismaAgents,
  Appointments as PrismaAppointments,
} from "@prisma/client";

export class AgentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AgentsCountArgs, "select">): Promise<number> {
    return this.prisma.agents.count(args);
  }

  async agentsItems<T extends Prisma.AgentsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentsFindManyArgs>
  ): Promise<PrismaAgents[]> {
    return this.prisma.agents.findMany<Prisma.AgentsFindManyArgs>(args);
  }
  async agents<T extends Prisma.AgentsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentsFindUniqueArgs>
  ): Promise<PrismaAgents | null> {
    return this.prisma.agents.findUnique(args);
  }
  async createAgents<T extends Prisma.AgentsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentsCreateArgs>
  ): Promise<PrismaAgents> {
    return this.prisma.agents.create<T>(args);
  }
  async updateAgents<T extends Prisma.AgentsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentsUpdateArgs>
  ): Promise<PrismaAgents> {
    return this.prisma.agents.update<T>(args);
  }
  async deleteAgents<T extends Prisma.AgentsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentsDeleteArgs>
  ): Promise<PrismaAgents> {
    return this.prisma.agents.delete(args);
  }

  async findAppointmentsItems(
    parentId: string,
    args: Prisma.AppointmentsFindManyArgs
  ): Promise<PrismaAppointments[]> {
    return this.prisma.agents
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentsItems(args);
  }

  async getAppointments(parentId: string): Promise<PrismaAppointments | null> {
    return this.prisma.agents
      .findUnique({
        where: { id: parentId },
      })
      .appointments();
  }
}
