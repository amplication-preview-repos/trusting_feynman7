/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Agents } from "./Agents";
import { AgentsCountArgs } from "./AgentsCountArgs";
import { AgentsFindManyArgs } from "./AgentsFindManyArgs";
import { AgentsFindUniqueArgs } from "./AgentsFindUniqueArgs";
import { CreateAgentsArgs } from "./CreateAgentsArgs";
import { UpdateAgentsArgs } from "./UpdateAgentsArgs";
import { DeleteAgentsArgs } from "./DeleteAgentsArgs";
import { AppointmentsFindManyArgs } from "../../appointments/base/AppointmentsFindManyArgs";
import { Appointments } from "../../appointments/base/Appointments";
import { AgentsService } from "../agents.service";
@graphql.Resolver(() => Agents)
export class AgentsResolverBase {
  constructor(protected readonly service: AgentsService) {}

  async _agentsItemsMeta(
    @graphql.Args() args: AgentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Agents])
  async agentsItems(
    @graphql.Args() args: AgentsFindManyArgs
  ): Promise<Agents[]> {
    return this.service.agentsItems(args);
  }

  @graphql.Query(() => Agents, { nullable: true })
  async agents(
    @graphql.Args() args: AgentsFindUniqueArgs
  ): Promise<Agents | null> {
    const result = await this.service.agents(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Agents)
  async createAgents(@graphql.Args() args: CreateAgentsArgs): Promise<Agents> {
    return await this.service.createAgents({
      ...args,
      data: {
        ...args.data,

        appointments: args.data.appointments
          ? {
              connect: args.data.appointments,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Agents)
  async updateAgents(
    @graphql.Args() args: UpdateAgentsArgs
  ): Promise<Agents | null> {
    try {
      return await this.service.updateAgents({
        ...args,
        data: {
          ...args.data,

          appointments: args.data.appointments
            ? {
                connect: args.data.appointments,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Agents)
  async deleteAgents(
    @graphql.Args() args: DeleteAgentsArgs
  ): Promise<Agents | null> {
    try {
      return await this.service.deleteAgents(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Appointments], { name: "appointmentsItems" })
  async findAppointmentsItems(
    @graphql.Parent() parent: Agents,
    @graphql.Args() args: AppointmentsFindManyArgs
  ): Promise<Appointments[]> {
    const results = await this.service.findAppointmentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Appointments, {
    nullable: true,
    name: "appointments",
  })
  async getAppointments(
    @graphql.Parent() parent: Agents
  ): Promise<Appointments | null> {
    const result = await this.service.getAppointments(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
